// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  userName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  isAdmin   Boolean  @default(false)
  orders    Order[]
}

model Adress {
  id     Int     @id @default(autoincrement())
  street String
  zip    Int
  city   String
  email  String
  orders Order[]
}

model Product {
  id         Int        @id @default(autoincrement())
  title      String
  price      Int
  image      String
  desc       String
  stock      Int
  categories Category[]
  createdAt  DateTime   @default(now())
  archived   Boolean
  orderRows  OrderRow[]
}

// model ProductCategory {
//   id         Int        @id @default(autoincrement())
//   product    Product[]
//   categories Category[]
// }

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  products     Product[]
}

model Order {
  id             Int        @id @default(autoincrement())
  user           User       @relation(fields: [userId], references: [id])
  userId         Int        @unique
  createdAt      DateTime
  shippingAdress Adress     @relation(fields: [adressId], references: [id])
  adressId       Int
  orderRows      OrderRow[]
}

model OrderRow {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int // relation scalar field (used in the `@relation` attribute above)
  product   Product @relation(fields: [productId], references: [id])
  productId Int // relation scalar field (used in the `@relation` attribute above)
  quantity  Int
  subTotal  Decimal

  @@id([orderId, productId])
}
