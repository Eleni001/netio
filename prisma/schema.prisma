// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   username  String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   isAdmin   Boolean  @default(false)

//   orders Order[]
// }

model User {
  id            String    @id @default(cuid())
  username      String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  isAdmin       Boolean   @default(false)

  accounts Account[]
  sessions Session[]

  orders Order[]
}

model Adress {
  id     Int    @id @default(autoincrement())
  street String
  zip    Int
  city   String
  email  String

  orders Order[]
}

model Product {
  id         Int      @id @default(autoincrement())
  title      String
  price      Int
  imageUrl   String
  desc       String
  stock      Int
  createdAt  DateTime @default(now())
  isArchived Boolean

  categories Category[]
  orderRows  OrderRow[]
}

// model ProductCategory {
//   id         Int        @id @default(autoincrement())
//   product    Product[]
//   categories Category[]
// }

model Category {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  slug     String  @unique
  imageUrl String?

  products Product[]
}

model Order {
  id                Int      @id @default(autoincrement())
  userId            String
  createdAt         DateTime
  shippingAddressId Int
  total             Float
  sentStatus        Boolean  @default(false)

  user            User       @relation(fields: [userId], references: [id])
  shippingAddress Adress     @relation(fields: [shippingAddressId], references: [id])
  orderRows       OrderRow[]
}

model OrderRow {
  orderId   Int // relation scalar field (used in the `@relation` attribute above)
  productId Int // relation scalar field (used in the `@relation` attribute above)
  quantity  Int
  subTotal  Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
